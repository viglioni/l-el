* l.el - Modern Functional Programming Utilities for Emacs Lisp

** Overview

=l.el= provides a modern functional programming approach to writing Emacs Lisp, drawing inspiration from Common Lisp, Haskell and Elixir. This library introduces currying, partial application, pattern matching, and placeholder substitution utilities that make Emacs Lisp more expressive and closer to modern functional programming paradigms.

** Features

- Automatic currying with =ldef=
- Pattern matching with =ldef=
- Type matching with =ldef=
- Partial application with =l-partial=
- Placeholder substitution with =__=
- Custom syntax with =with-l=
- Optional syntax transformation via =l-syntax=


Check [[./changelog.org][changelog]] for more information.

** Usage

This package is not on melpa/elpa (yet?), but you can install via =use-package/straight=:

#+begin_src elisp
  (use-package l
    :straight (:type git :host github :repo "viglioni/l-el" :tag "v0.0.0")
    :config
    ;; ...
    )
#+end_src


Or clone this repo, add =l.el= to your load path and require it:

#+begin_src emacs-lisp
(require 'l)
#+end_src

** Configuration

The =l-syntax= variable controls syntax transformation behavior. It can be set globally:

#+begin_src emacs-lisp
(setq l-syntax t)
#+end_src

Or locally in a file using a property line:

#+begin_src emacs-lisp
;; -*- l-syntax: t; -*-
#+end_src

To enable syntax transformations for evaluation functions, run:

#+begin_src emacs-lisp
(l-syntax-advices)
#+end_src

** API Reference

*** Variables

**** =l-syntax=

Controls whether l syntax transformations are applied during evaluation.

When set to =t= globally, l syntax transformations will be applied to all elisp evaluation operations without requiring file-local variable declarations in individual files.

When set to =nil= (the default), l syntax transformations will only be applied to files that explicitly declare =l-syntax= as a file-local variable.

*** Functions

**** =l-syntax-advices=

Add advice to evaluation functions for l syntax support.

This function adds around advice to =eval-last-sexp=, =eval-region=, =eval-buffer=, =load-file=, and =load= to enable l syntax processing.

**** =l-syntax-remove-advices=

Remove advice from evaluation functions for l syntax support.

This function removes around advice from =eval-last-sexp=, =eval-region=, =eval-buffer=, =load-file=, and =load= that was added by =l-syntax-advices=.

**** =l-partial (fn &rest init-args)=

Return a partially applied function with FN and INIT-ARGS.

Creates a new function that, when called, applies FN to the combination of INIT-ARGS (provided now) and any additional arguments (provided later).

***** Examples:
#+begin_src emacs-lisp
(funcall (l-partial '+ 5) 3)     ;; => 8
(funcall (l-partial '* 2 3) 4)   ;; => 24
(funcall (l-partial 'concat "Hello, ") "World!")  ;; => "Hello, World!"
#+end_src

**** =ldef (name args &rest body)=

Define autocurried functions with pattern matching support.

Creates a function NAME that automatically curries when called with fewer arguments and supports pattern matching on arguments.

ARGS is a list of parameter patterns supporting:
- Regular parameters: =arg=
- Wildcards: =_ignore=, =_var= (bind but conventionally ignore)
- Type matches: =(arg :integer)=, =(arg :string)=, etc.
- Value matches: =(arg "specific-value")=, =(arg 42)=, etc.

***** Pattern Matching Examples:
#+begin_src emacs-lisp
(ldef fib ((n 0)) 0)                    ;; matches when n = 0
(ldef fib ((n 1)) 1)                    ;; matches when n = 1
(ldef fib (n) (+ (fib (- n 1)) (fib (- n 2))))  ;; general case

(ldef greet ((name "Alice")) "Hello, Alice!")  ;; matches "Alice"
(ldef greet (name) (concat "Hi, " name "!"))   ;; general case

(ldef calc ((op '+) x y) (+ x y))       ;; matches when op = '+
(ldef calc ((op '*) x y) (* x y))       ;; matches when op = '*
(ldef calc (_op _x _y) (error "Unknown operation"))  ;; fallback
#+end_src

***** Currying Examples:
#+begin_src emacs-lisp
(ldef add3 (x y z) (+ x y z))
(add3 1 2 3)        ;; => 6 (full application)
(funcall (add3 1) 2 3)  ;; => 6 (partial application)
(funcall (funcall (add3 1) 2) 3)  ;; => 6 (chained partial)
#+end_src

**** =with-l (&rest body)=

Transform expressions to support curried function call syntax.

Enables the use of =((fn args) more-args)= syntax within the macro body, transforming such expressions into proper funcall forms.

The transformation converts:
- =((fn arg1) arg2 arg3)= => =(funcall (fn arg1) arg2 arg3)=
- =(((fn arg1) arg2) arg3)= => =(funcall (funcall (fn arg1) arg2) arg3)=

***** Examples:
#+begin_src emacs-lisp
(with-l ((add3 1) 2 3))     ;; => 6
(with-l (((add3 1) 2) 3))   ;; => 6
(with-l (+ ((add3 1) 2 3) ((multiply3 2) 3 4)))  ;; => 30
#+end_src

**** =l (&rest expr)=

Lambda macro for creating functions with arrow syntax.

#+begin_src emacs-lisp
(l x y -> (+ x y))  ;; equivalent to (lambda (x y) (+ x y))
#+end_src

**** =__ (block &optional arg)=

Substitute all occurrences of =__= in BLOCK with ARG.

This macro provides a convenient way to create expressions with placeholder substitution. Every occurrence of the symbol =__= in BLOCK will be replaced with ARG before evaluation.

***** Examples:
#+begin_src emacs-lisp
(__ (+ __ (* __ 2)) 5)
;; Expands to: (+ 5 (* 5 2))
;; Evaluates to: 15

(__ (+ __ (* __ 2)))
;; Returns a function that expects one argument
;; (funcall (__ (+ __ (* __ 2))) 5) evaluates to: 15

(__ (list __ (car __) (cdr __)) '(1 2 3))
;; Expands to: (list (1 2 3) (car (1 2 3)) (cdr (1 2 3)))
;; Evaluates to: ((1 2 3) 1 (2 3))
#+end_src

**** =l-generic-cleanup (name)=

Remove generic function NAME and all its methods.

This function removes a generic function from the registry and unbinds the function symbol.

** Type System

The library supports the following type predicates for pattern matching:

- =:function= - functionp
- =:number= - numberp
- =:integer= - integerp
- =:float= - floatp
- =:string= - stringp
- =:symbol= - symbolp
- =:list= - listp
- =:cons= - consp
- =:vector= - vectorp
- =:hash-table= - hash-table-p
- =:buffer= - bufferp
- =:callable= - function or subroutine
- =:sequence= - sequencep
- =:atom= - atom
- =:null= - null

** License

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

** Author

Laura Viglioni

** URL

https://github.com/lauravglioni/l

** Development

You need to have [[https://github.com/cask/cask][cask]] installed to run the tests.

#+begin_src shell :exports both :results output 
  make deps
  make test
#+end_src


*** Contribution to this project

- Before opening a PR, open an issue first and let's discuss there the possible solutions.
