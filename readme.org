# -*- eval: (add-hook 'before-save-hook 'org-make-toc nil t) -*-
#+title: l.el - Modern Functional Programming Utilities for Emacs Lisp
#+options: toc:t
#+startup: show2levels
 
* Table of Contents
:PROPERTIES:
:TOC:      :include all :depth 3
:END:
:CONTENTS:
- [[#table-of-contents][Table of Contents]]
- [[#overview][Overview]]
  - [[#features][Features]]
  - [[#usage][Usage]]
  - [[#configuration][Configuration]]
- [[#api-reference][API Reference]]
  - [[#variables][Variables]]
    - [[#l-syntax][l-syntax]]
  - [[#functions][Functions]]
    - [[#l-syntax-advices][l-syntax-advices]]
    - [[#l-syntax-remove-advices][l-syntax-remove-advices]]
    - [[#lpartial-fn-rest-init-args][lpartial (fn &rest init-args)]]
    - [[#ldef-name-args-rest-body][ldef (name args &rest body)]]
    - [[#with-l-rest-body][with-l (&rest body)]]
    - [[#l-rest-expr][l (&rest expr)]]
    - [[#__-block-optional-arg][__ (block &optional arg)]]
    - [[#l-generic-cleanup-name][l-generic-cleanup (name)]]
    - [[#l-mode][l-mode]]
    - [[#l-require-feature-optional-filename-noerror][l-require (feature &optional filename noerror)]]
  - [[#utilities][Utilities]]
    - [[#lcomp-rest-functions][lcomp (&rest functions)]]
- [[#type-system][Type System]]
- [[#license][License]]
- [[#author][Author]]
- [[#url][URL]]
- [[#development][Development]]
  - [[#running-the-tests][Running the tests]]
  - [[#contribution-to-this-project][Contribution to this project]]
:END:

* Overview

=l.el= provides a comprehensive modern functional programming approach to writing Emacs Lisp, drawing inspiration from Common Lisp, Haskell, and Elixir. This library transforms Emacs Lisp into a more expressive functional programming language with advanced features including automatic currying, sophisticated pattern matching, type systems, syntax transformations, and specialized development tools.

#+begin_src elisp :exports both :results output 
  ;; -*- l-syntax: t; -*-

  @doc "A function that returns the nth Fibonacci number.
  This function grows exponentially and demonstrates pattern matching."
  (ldef fib ((n 0)) 0)
  (ldef fib ((n 1)) 1)
  (ldef fib ((n :integer))
        (+ (fib (- n 1))
           (fib (- n 2))))

  @doc "This function calculates delta in a quadratic function
  and demonstrates automatic currying capabilities."
  (ldef delta ((a :number) (b :number) (c :number))
        (- (* b b) (* 4 a c)))

  ;; Multiple calling styles with automatic currying:
  ((((delta) 1) 2) 3)  ;; Chained partial application
  (delta 1 2 3)        ;; Direct application
  (funcall (delta 1 2) 3) ;; Partial with funcall

  @doc "Sum function with rest parameters for variadic arguments."
  (ldef sum ((nums :rest)) (apply '+ nums))
  (sum 1 2 3 4 5)      ;; => 15

  @doc "Greeting function with value-based pattern matching."
  (ldef greet ((name "Alice")) "Hello, Alice!")
  (ldef greet ((name :string)) (concat "Hi, " name "!"))
  (greet "Alice")      ;; => "Hello, Alice!"
  (greet "Bob")        ;; => "Hi, Bob!"
#+end_src

** Features

- **Automatic currying** with =ldef= - functions automatically curry when called with fewer arguments
- **Advanced pattern matching** with =ldef= - supports value matching, type matching, and rest parameters
- **Comprehensive type system** - extensive type predicates for robust pattern matching
- **Partial application** with =lpartial= - create partially applied functions
- **Placeholder substitution** with =__= - elegant placeholder-based expressions
- **Lambda syntax** with =l= - arrow notation for concise function definitions
- **Syntax transformation** with =with-l= and =l-syntax= - enable natural curried function call syntax
- **Documentation system** with =@doc= - Elixir-style documentation annotations
- **Enhanced major mode** with =l-mode= - specialized syntax highlighting and development tools
- **Function composition** with =lcomp= - compose functions for elegant data transformation
- **Specialized loading** with =l-require= - enhanced library loading with automatic l-syntax processing
- **Generic function management** - comprehensive tools for function lifecycle management

Check [[./changelog.org][changelog]] for more information.

** Usage

This package is not on MELPA/ELPA (yet?), but you can install via =use-package/straight=:

#+begin_src elisp
  (use-package l
    :straight (:type git :host github :repo "viglioni/l-el" :tag "v0.3.0")
    :mode ("\\.el\\'" . l-mode) ;; Enhanced syntax highlighting
    :custom
    (l-syntax t) ;; Optional: globally enable l-syntax transformations
    :init
    (l-syntax-advices) ;; Enable automatic syntax transformation
    ;; ...
    )
#+end_src

Or clone this repository, add =l.el= to your load path and require it:

#+begin_src emacs-lisp
(require 'l)
#+end_src

** Configuration

The =l-syntax= variable controls syntax transformation behavior and can be configured in multiple ways:

***Global Configuration:***
#+begin_src emacs-lisp
(setq l-syntax t)
(l-syntax-advices)  ; Enable automatic transformation for evaluation functions
#+end_src

***File-local Configuration (Property Line):***
#+begin_src emacs-lisp
;; -*- l-syntax: t; -*-
#+end_src

***File-local Configuration (Local Variables):***
#+begin_src emacs-lisp
;; Local Variables:
;; l-syntax: t
;; End:
#+end_src

When enabled, =l-syntax= automatically wraps expressions in =with-l= during =eval-last-sexp=, =eval-region=, =eval-buffer=, =load-file=, and =load= operations, enabling natural curried function syntax without explicit =with-l= wrapping.
* API Reference

** Variables

*** =l-syntax=

Controls whether l syntax transformations are applied during evaluation.

When set to =t= globally, l syntax transformations will be applied to all elisp evaluation operations without requiring file-local variable declarations in individual files.

When set to =nil= (the default), l syntax transformations will only be applied to files that explicitly declare =l-syntax= as a file-local variable.

** Functions

*** =l-syntax-advices=

Add advice to evaluation functions for l syntax support.

This function adds around advice to =eval-last-sexp=, =eval-region=, =eval-buffer=, =load-file=, and =load= to enable l syntax processing.

*** =l-syntax-remove-advices=

Remove advice from evaluation functions for l syntax support.

This function removes around advice from =eval-last-sexp=, =eval-region=, =eval-buffer=, =load-file=, and =load= that was added by =l-syntax-advices=.

*** =lpartial (fn &rest init-args)=

Return a partially applied function with FN and INIT-ARGS.

Creates a new function that, when called, applies FN to the combination of INIT-ARGS (provided now) and any additional arguments (provided later).

***** Examples:
#+begin_src emacs-lisp
  (funcall (lpartial '+ 5) 3)     ;; => 8
  (funcall (lpartial '* 2 3) 4)   ;; => 24
  (funcall (lpartial 'concat "Hello, ") "World!")  ;; => "Hello, World!"
#+end_src

*** =ldef (name args &rest body)=

Define autocurried functions with pattern matching support.

Creates a function NAME that automatically curries when called with fewer arguments and supports pattern matching on arguments.

ARGS is a list of parameter patterns supporting:
- Regular parameters: =arg=
- Wildcards: =_ignore=, =_var= (bind but conventionally ignore)
- Type matches: =(arg :integer)=, =(arg :string)=, etc.
- Value matches: =(arg "specific-value")=, =(arg 42)=, etc.

***** Pattern Matching Examples:
#+begin_src emacs-lisp
  (ldef fib ((n 0)) 0)                    ;; matches when n = 0
  (ldef fib ((n 1)) 1)                    ;; matches when n = 1
  (ldef fib (n) (+ (fib (- n 1)) (fib (- n 2))))  ;; general case

  (ldef greet ((name "Alice")) "Hello, Alice!")  ;; matches "Alice"
  (ldef greet (name) (concat "Hi, " name "!"))   ;; general case

  (ldef calc ((op '+) x y) (+ x y))       ;; matches when op = '+
  (ldef calc ((op '*) x y) (* x y))       ;; matches when op = '*
  (ldef calc (_op _x _y) (error "Unknown operation"))  ;; fallback
#+end_src

***** Currying Examples:
#+begin_src emacs-lisp
(ldef add3 (x y z) (+ x y z))
(add3 1 2 3)        ;; => 6 (full application)
(funcall (add3 1) 2 3)  ;; => 6 (partial application)
(funcall (funcall (add3 1) 2) 3)  ;; => 6 (chained partial)
#+end_src

*** =with-l (&rest body)=

Transform expressions to support curried function call syntax.

Enables the use of =((fn args) more-args)= syntax within the macro body, transforming such expressions into proper funcall forms.

The transformation converts:
- =((fn arg1) arg2 arg3)= => =(funcall (fn arg1) arg2 arg3)=
- =(((fn arg1) arg2) arg3)= => =(funcall (funcall (fn arg1) arg2) arg3)=

***** Examples:
#+begin_src emacs-lisp
(with-l ((add3 1) 2 3))     ;; => 6
(with-l (((add3 1) 2) 3))   ;; => 6
(with-l (+ ((add3 1) 2 3) ((multiply3 2) 3 4)))  ;; => 30
#+end_src

*** =l (&rest expr)=

Lambda macro for creating functions with arrow syntax.

#+begin_src emacs-lisp
(l x y -> (+ x y))  ;; equivalent to (lambda (x y) (+ x y))
#+end_src

*** =__ (block &optional arg)=

Substitute all occurrences of =__= in BLOCK with ARG.

This macro provides a convenient way to create expressions with placeholder substitution. Every occurrence of the symbol =__= in BLOCK will be replaced with ARG before evaluation.

***** Examples:
#+begin_src emacs-lisp
  (__ (+ __ (* __ 2)) 5)
  ;; Expands to: (+ 5 (* 5 2))
  ;; Evaluates to: 15

  (__ (+ __ (* __ 2)))
  ;; Returns a function that expects one argument
  ;; (funcall (__ (+ __ (* __ 2))) 5) evaluates to: 15

  (__ (list __ (car __) (cdr __)) '(1 2 3))
  ;; Expands to: (list (1 2 3) (car (1 2 3)) (cdr (1 2 3)))
  ;; Evaluates to: ((1 2 3) 1 (2 3))
#+end_src

*** =l-generic-cleanup (name)=

Remove generic function NAME and all its methods.

This function removes a generic function from the registry and unbinds the function symbol.


*** =l-mode=

Enhanced major mode extending =emacs-lisp-mode= with specialized features for l.el.

This major mode provides:
- Enhanced syntax highlighting for =@doc= annotations
- Automatic activation when =l-syntax= is enabled
- Full Emacs Lisp compatibility with additional l.el-specific features
- Proper indentation for l.el constructs

The mode is automatically activated for =.el= files when configured appropriately and provides a better development experience when working with l.el syntax.

**** Examples:
#+begin_src emacs-lisp
;; Manual activation
(l-mode)

;; Automatic activation via use-package
(use-package l
  :mode ("\\.el\\'" . l-mode))
#+end_src

*** =l-require (feature &optional filename noerror)=

Enhanced library loading with automatic l-syntax processing.

Similar to =require= but with enhanced support for files that declare l-syntax support. When loading files with l-syntax enabled, automatically processes l.el syntax transformations.

FEATURE is the feature symbol to require.
FILENAME is the optional file name to load.
NOERROR when non-nil, don't signal an error if the file is not found.

**** Examples:
#+begin_src emacs-lisp
;; Load a library with l-syntax support
(l-require 'my-l-library)

;; Load with specific filename
(l-require 'utilities "my-utils.el")

;; Load without error if not found
(l-require 'optional-feature nil t)
#+end_src

** Utilities

*** =lcomp (&rest functions)=

Compose functions for elegant data transformation.

Returns a new function that applies FUNCTIONS in right-to-left order (mathematical composition). The rightmost function can accept multiple arguments, while subsequent functions must accept a single argument.

**** Examples:
#+begin_src emacs-lisp
;; Basic composition
(ldef double (l x -> (* 2 x)))
(ldef add-one (l x -> (+ 1 x)))
((lcomp add-one double) 5)  ;; => 11 (double first, then add-one)

;; Multiple function composition
(ldef negate (l x -> (- x)))
(ldef square (l x -> (* x x)))
((lcomp negate square add-one double) 3)  ;; => -49

;; With built-in functions
((lcomp 'car 'reverse) '(1 2 3 4))  ;; => 4
#+end_src
* Type System

The library supports the following type predicates for pattern matching:

- =:buffer= - bufferp
- =:callable= - function or subroutine
- =:cons= - consp
- =:float= - floatp
- =:function= - functionp
- =:hash-table= - hash-table-p
- =:integer= - integerp
- =:list= - listp
- =:null= - null
- =:number= - numberp
- =:sequence= - sequencep
- =:string= - stringp
- =:symbol= - symbolp
- =:vector= - vectorp

* License

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

* Author

Laura Viglioni

* URL

https://github.com/viglioni/l-el

* Development

** Running the tests

You need to have [[https://github.com/cask/cask][cask]] installed to run the tests.

#+begin_src shell :exports both :results output 
  make deps
  make test
#+end_src


** Contribution to this project

- Before opening a PR, open an issue first and let's discuss there the possible solutions.
